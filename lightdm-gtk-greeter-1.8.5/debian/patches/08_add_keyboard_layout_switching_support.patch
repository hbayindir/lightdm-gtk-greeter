Description: Add a keybaord layout menu to the user interface.
 This patch adds a keyboard layout menu item to the greeter user interface.
 Layouts are got and set with the LightDM's internal keyboard layout support.

Author: Hakan Bayindir <hakan.bayindir@tubitak.gov.tr>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

Index: lightdm-gtk-greeter-1.8.5/src/lightdm-gtk-greeter.c
===================================================================
--- lightdm-gtk-greeter-1.8.5.orig/src/lightdm-gtk-greeter.c
+++ lightdm-gtk-greeter-1.8.5/src/lightdm-gtk-greeter.c
@@ -1,7 +1,7 @@
 /*
  * Copyright (C) 2010-2011 Robert Ancell.
  * Author: Robert Ancell <robert.ancell@canonical.com>
- * 
+ *
  * This program is free software: you can redistribute it and/or modify it under
  * the terms of the GNU General Public License as published by the Free Software
  * Foundation, either version 3 of the License, or (at your option) any later
@@ -68,7 +68,7 @@ static GtkWidget *clock_label;
 static GtkWidget *menubar, *power_menuitem, *session_menuitem, *language_menuitem, *a11y_menuitem, *session_badge;
 static GtkWidget *suspend_menuitem, *hibernate_menuitem, *restart_menuitem, *shutdown_menuitem;
 static GtkWidget *keyboard_menuitem;
-static GtkMenu *session_menu, *language_menu;
+static GtkMenu *session_menu, *language_menu, *keyboard_layout_menu;
 
 /* Login Window Widgets */
 static GtkWindow *login_window;
@@ -94,6 +94,9 @@ GSList *backgrounds = NULL;
 static gchar *current_session;
 static gchar *current_language;
 
+/* Global lists */
+GSList *keyboard_layouts;
+
 /* Screensaver values */
 int timeout, interval, prefer_blanking, allow_exposures;
 
@@ -606,7 +609,7 @@ get_language (void)
     if (current_language)
         return g_strdup (current_language);
 
-    menu_items = gtk_container_get_children(GTK_CONTAINER(language_menu));    
+    menu_items = gtk_container_get_children(GTK_CONTAINER(language_menu));
     for (menu_iter = menu_items; menu_iter != NULL; menu_iter = g_list_next(menu_iter))
     {
         if (gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(menu_iter->data)))
@@ -621,7 +624,7 @@ get_language (void)
 static void
 set_language (const gchar *language)
 {
-    const gchar *default_language = NULL;    
+    const gchar *default_language = NULL;
     GList *menu_items, *menu_iter;
 
     if (!gtk_widget_get_visible (language_menuitem))
@@ -670,6 +673,49 @@ set_language (const gchar *language)
     }
 }
 
+
+
+/* This function sets the keyboard layout and the radio menu that controls the
+ * layouts. When called without an argument, it just gets the keyboard and
+ * sets the menu. When called with a parameter, it actually sets the layout.
+ * In that case, radio menu updates itself automatically, so no action is needed
+ * on the menu.
+ */
+static void
+set_keyboard_layout (LightDMLayout *keyboard_layout)
+{
+    if (keyboard_layout == NULL)
+    {
+        /* Get the current layout and its name. */
+        LightDMLayout *current_layout, *iteration_layout;
+        const gchar *current_layout_name, *iteration_layout_name;
+        GSList *current_item;
+
+        current_layout = lightdm_get_layout ();
+        current_layout_name = g_strdup(lightdm_layout_get_name (current_layout));
+        g_debug ("Current keyboard layout name is %s", current_layout_name);
+
+        for (current_item = keyboard_layouts; current_item; current_item = g_slist_next(current_item))
+        {
+          iteration_layout = g_object_get_data (G_OBJECT (current_item->data), "keyboard-layout");
+          iteration_layout_name = lightdm_layout_get_name(iteration_layout);
+
+          if (g_strcmp0(iteration_layout_name, current_layout_name) == 0)
+          {
+              g_debug ("Active keyboard layout on the menu, which is %s is found", iteration_layout_name);
+              gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (current_item->data), TRUE);
+              break;
+          }
+        }
+    }
+
+    if (keyboard_layout != NULL)
+    {
+        lightdm_set_layout(keyboard_layout);
+        return;
+    }
+}
+
 static void
 set_message_label (const gchar *text)
 {
@@ -758,7 +804,7 @@ set_user_image (const gchar *username)
             }
         }
     }
-    
+
     if (default_user_pixbuf)
         gtk_image_set_from_pixbuf (GTK_IMAGE (user_image), default_user_pixbuf);
     else
@@ -786,7 +832,7 @@ get_absolute_position (const DimensionPo
 
 static void
 center_window (GtkWindow *window, GtkAllocation *unused, const WindowPosition *pos)
-{   
+{
     GdkScreen *screen = gtk_window_get_screen (window);
     GtkAllocation allocation;
     GdkRectangle monitor_geometry;
@@ -1093,6 +1139,19 @@ language_selected_cb(GtkMenuItem *menuit
     }
 }
 
+void
+keyboard_layout_selected_cb(GtkMenuItem *menuitem, gpointer user_data);
+G_MODULE_EXPORT
+void keyboard_layout_selected_cb (GtkMenuItem *menuitem, gpointer user_data)
+{
+  if (gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(menuitem)))
+  {
+     LightDMLayout *keyboard_layout = g_object_get_data (G_OBJECT (menuitem), "keyboard-layout");
+     g_warning ("Keyboard layout with name %s is selected.", lightdm_layout_get_name(keyboard_layout));
+     set_keyboard_layout (keyboard_layout);
+  }
+}
+
 static void
 power_menu_cb (GtkWidget *menuitem, gpointer userdata)
 {
@@ -1362,7 +1421,7 @@ process_prompts (LightDMGreeter *greeter
         /* If we're reached here, we're going to write different things to the infobar. */
         g_debug ("[process_prompts] Setting append next prompt to FALSE");
         append_next_prompt = FALSE;
-        
+
         /*
          * If we've reached here, the message label is gonna change below,
          * so we won't need that message.
@@ -1419,7 +1478,7 @@ login_cb (GtkWidget *widget)
 {
     /* Reset to default screensaver values */
     if (lightdm_greeter_get_lock_hint (greeter))
-        XSetScreenSaver(gdk_x11_display_get_xdisplay(gdk_display_get_default ()), timeout, interval, prefer_blanking, allow_exposures);        
+        XSetScreenSaver(gdk_x11_display_get_xdisplay(gdk_display_get_default ()), timeout, interval, prefer_blanking, allow_exposures);
 
     gtk_widget_set_sensitive (GTK_WIDGET (username_entry), FALSE);
     gtk_widget_set_sensitive (GTK_WIDGET (password_entry), FALSE);
@@ -1549,7 +1608,7 @@ show_power_prompt (const gchar* action,
     const GList *items, *item;
     gint logged_in_users = 0;
     gchar *warning;
-    
+
     /* Check if there are still users logged in, count them and if so, display a warning */
     items = lightdm_user_list_get_users (lightdm_user_list_get_instance ());
     for (item = items; item; item = item->next)
@@ -1574,7 +1633,7 @@ show_power_prompt (const gchar* action,
                                      GTK_MESSAGE_OTHER,
                                      GTK_BUTTONS_NONE,
                                      "%s", action);
-    gtk_message_dialog_format_secondary_markup(GTK_MESSAGE_DIALOG(dialog), "%s", message);        
+    gtk_message_dialog_format_secondary_markup(GTK_MESSAGE_DIALOG(dialog), "%s", message);
     button = gtk_dialog_add_button(GTK_DIALOG (dialog), _("Cancel"), GTK_RESPONSE_CANCEL);
     gtk_widget_set_name(button, "cancel_button");
     button = gtk_dialog_add_button(GTK_DIALOG (dialog), action, GTK_RESPONSE_OK);
@@ -1908,7 +1967,7 @@ load_user_list (void)
     {
         gchar *name;
         gboolean matched = FALSE;
-        
+
         if (selected_user)
         {
             do
@@ -1934,7 +1993,7 @@ load_user_list (void)
             set_displayed_user(greeter, name);
             g_free(name);
         }
-        
+
     }
 
     g_free (last_user);
@@ -2194,16 +2253,16 @@ clock_timeout_thread (void)
     struct tm * timeinfo;
     gchar time_str[50];
     gchar *markup;
-    
+
     time ( &rawtime );
     timeinfo = localtime ( &rawtime );
-    
+
     strftime(time_str, 50, clock_format, timeinfo);
     markup = g_markup_printf_escaped("<b>%s</b>", time_str);
     if (g_strcmp0(markup, gtk_label_get_label(GTK_LABEL(clock_label))) != 0)
         gtk_label_set_markup( GTK_LABEL(clock_label), markup );
     g_free(markup);
-    
+
     return TRUE;
 }
 
@@ -2343,7 +2402,7 @@ main (int argc, char **argv)
 
     /* init gtk */
     gtk_init (&argc, &argv);
-    
+
 #ifdef HAVE_LIBIDO
     ido_init ();
 #endif
@@ -2366,7 +2425,7 @@ main (int argc, char **argv)
     g_clear_error (&error);
 
     greeter = lightdm_greeter_new ();
-    g_signal_connect (greeter, "show-prompt", G_CALLBACK (show_prompt_cb), NULL);  
+    g_signal_connect (greeter, "show-prompt", G_CALLBACK (show_prompt_cb), NULL);
     g_signal_connect (greeter, "show-message", G_CALLBACK (show_message_cb), NULL);
     g_signal_connect (greeter, "authentication-complete", G_CALLBACK (authentication_complete_cb), NULL);
     g_signal_connect (greeter, "autologin-timer-expired", G_CALLBACK (lightdm_greeter_authenticate_autologin), NULL);
@@ -2419,7 +2478,7 @@ main (int argc, char **argv)
     if (value)
         screensaver_timeout = g_ascii_strtoll (value, &end_ptr, 0);
     g_free (value);
-    
+
     display = gdk_x11_display_get_xdisplay(gdk_display_get_default ());
     if (lightdm_greeter_get_lock_hint (greeter)) {
         XGetScreenSaver(display, &timeout, &interval, &prefer_blanking, &allow_exposures);
@@ -2459,7 +2518,7 @@ main (int argc, char **argv)
         value = g_strdup("Sans 10");
         g_object_set (gtk_settings_get_default (), "gtk-font-name", value, NULL);
     }
-    g_object_get (gtk_settings_get_default (), "gtk-font-name", &default_font_name, NULL);  
+    g_object_get (gtk_settings_get_default (), "gtk-font-name", &default_font_name, NULL);
     value = g_key_file_get_value (config, "greeter", "xft-dpi", NULL);
     if (value)
         g_object_set (gtk_settings_get_default (), "gtk-xft-dpi", (int) (1024 * atof (value)), NULL);
@@ -2475,7 +2534,7 @@ main (int argc, char **argv)
     if (value)
         g_object_set (gtk_settings_get_default (), "gtk-xft-rgba", value, NULL);
     g_free (value);
-    
+
     /* Get a11y on screen keyboard command*/
     gint argp;
     value = g_key_file_get_value (config, "greeter", "keyboard", NULL);
@@ -2493,7 +2552,7 @@ main (int argc, char **argv)
         return EXIT_FAILURE;
     }
     g_clear_error (&error);
-    
+
     /* Panel */
     panel_window = GTK_WINDOW (gtk_builder_get_object (builder, "panel_window"));
 #if GTK_CHECK_VERSION (3, 0, 0)
@@ -2507,12 +2566,12 @@ main (int argc, char **argv)
     clock_label = GTK_WIDGET(gtk_builder_get_object (builder, "clock_label"));
     menubar = GTK_WIDGET (gtk_builder_get_object (builder, "menubar"));
     /* Never allow the panel-window to be moved via the menubar */
-#if GTK_CHECK_VERSION (3, 0, 0) 
+#if GTK_CHECK_VERSION (3, 0, 0)
     css_provider = gtk_css_provider_new ();
     gtk_css_provider_load_from_data (css_provider, "* { -GtkWidget-window-dragging: false; }", -1, NULL);
     gtk_style_context_add_provider (GTK_STYLE_CONTEXT(gtk_widget_get_style_context(GTK_WIDGET(menubar))), GTK_STYLE_PROVIDER (css_provider), 800);
 #endif
-    
+
     keyboard_menuitem = GTK_WIDGET (gtk_builder_get_object (builder, "keyboard_menuitem"));
 
     /* Login window */
@@ -2630,7 +2689,7 @@ main (int argc, char **argv)
         {
             LightDMSession *session = item->data;
             GtkWidget *radiomenuitem;
-            
+
             radiomenuitem = gtk_radio_menu_item_new_with_label (sessions, lightdm_session_get_name (session));
             g_object_set_data (G_OBJECT (radiomenuitem), "session-key", (gpointer) lightdm_session_get_key (session));
             sessions = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (radiomenuitem));
@@ -2658,7 +2717,7 @@ main (int argc, char **argv)
                 label = g_strdup_printf ("%s - %s", lightdm_language_get_name (language), country);
             else
                 label = g_strdup (lightdm_language_get_name (language));
-                
+
             code = lightdm_language_get_code (language);
             gchar *modifier = strchr (code, '@');
             if (modifier != NULL)
@@ -2677,7 +2736,45 @@ main (int argc, char **argv)
         }
         set_language (NULL);
     }
-    
+
+    /* For Now, I will piggyback the keyboard menu to language menu for simplicity */
+    if (gtk_widget_get_visible (language_menuitem))
+    {
+      /* Before starting everything, add a separator to make things look nice */
+      GtkWidget *menu_separator = gtk_separator_menu_item_new ();
+      gtk_menu_shell_append (GTK_MENU_SHELL(language_menu), menu_separator);
+      gtk_widget_show(menu_separator);
+
+      items = lightdm_get_layouts();
+      keyboard_layouts = NULL;
+
+      for (item = items; item; item = item->next)
+      {
+        LightDMLayout *keyboard_layout = item->data;
+        const gchar *layout_name, *layout_description;
+        gchar *label;
+        GtkWidget *radiomenuitem;
+
+        layout_name = g_strdup (lightdm_layout_get_name (keyboard_layout));
+        layout_description = g_strdup (lightdm_layout_get_description(keyboard_layout));
+        label = layout_description;
+
+        // TODO: Change this method to something configurable or automagic.
+        // Only add Turkish Q, Turkish F and English keyboard layouts.
+        if (g_strcmp0(layout_name, "tr") == 0 || g_strcmp0(layout_name, "tr\tf") == 0)
+        {
+            radiomenuitem = gtk_radio_menu_item_new_with_label (keyboard_layouts, label);
+            g_object_set_data (G_OBJECT (radiomenuitem), "keyboard-layout", (gpointer) keyboard_layout);
+            keyboard_layouts = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (radiomenuitem));
+            g_signal_connect(G_OBJECT(radiomenuitem), "activate", G_CALLBACK(keyboard_layout_selected_cb), NULL);
+            gtk_menu_shell_append (GTK_MENU_SHELL(language_menu), radiomenuitem);
+            gtk_widget_show (GTK_WIDGET(radiomenuitem));
+        }
+      }
+
+      set_keyboard_layout(NULL);
+    }
+
     /* a11y menu */
     if (gtk_widget_get_visible (a11y_menuitem))
     {
@@ -2725,14 +2822,14 @@ main (int argc, char **argv)
         numScreens = gdk_display_get_n_screens (gdk_display_get_default());
     #endif
 
-    /* Set up the background images */	
+    /* Set up the background images */
     for (scr = 0; scr < numScreens; scr++)
     {
         screen = gdk_display_get_screen (gdk_display_get_default (), scr);
         for (monitor = 0; monitor < gdk_screen_get_n_monitors (screen); monitor++)
         {
             gdk_screen_get_monitor_geometry (screen, monitor, &monitor_geometry);
-        
+
             window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
             gtk_window_set_type_hint(GTK_WINDOW(window), GDK_WINDOW_TYPE_HINT_DESKTOP);
 #if GTK_CHECK_VERSION (3, 0, 0)
@@ -2783,7 +2880,7 @@ main (int argc, char **argv)
         gchar *y = strchr(value, ' ');
         if (y)
             (y++)[0] = '\0';
-        
+
         if (read_position_from_str (x, &main_window_pos.x))
             /* If there is no y-part then y = x */
             if (!y || !read_position_from_str (y, &main_window_pos.y))
